export TERM="xterm-256color"

# Path to your oh-my-zsh configuration.
export ZSH=$HOME/.oh-my-zsh
# export FZF_DEFAULT_COMMAND='rg --files --hidden'
# Directories to be prepended to $PATH
declare -a dirs_to_prepend
dirs_to_prepend=(
  "/usr/local/sbin"
  "/$HOME/.local/bin"
  "/usr/local/git/bin"
  "/usr/local/"
  "/usr/local/mysql/bin"
  "/sw/bin/"
  "$HOME/dotfiles/bin"
  "$HOME/bin"
  "$HOME/.yarn/bin"
  "$HOME/.safe/cli"
  "$HOME/.cargo/bin"
  "$HOME/Library/Python/3.7/bin"
  "/snap/bin/apm"
  # "$(brew --prefix ruby)/bin"
  # "$(brew --prefix coreutils)/libexec/gnubin" # Add brew-installed GNU core utilities bin
  # "$HOME/.rvm/bin"
  # "$(brew --prefix)/share/npm/bin" # Add npm-installed package bin,
  # "$HOME/.cargo/bin"
  # "$HOME/emsdk-portable"
  # "$HOME/emsdk-portable/clang/fastcomp/build_incoming_64/bin"
  # "$HOME/emsdk-portable/emscripten/incoming"
)


# Explicitly configured $PATH
PATH="/usr/bin:/usr/local/bin:/bin:/usr/sbin:/sbin"

for dir in ${(k)dirs_to_prepend[@]}
do
  if [ -d ${dir} ]; then
    # If these directories exist, then prepend them to existing PATH
    PATH="${dir}:$PATH"
  fi
done

unset dirs_to_prepend

export PATH

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="powerlevel9k/powerlevel9k"
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_middle"
POWERLEVEL9K_SHORTEN_DIR_LENGTH=3
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status nvm )
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=( os_icon dir vcs )
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_MODE='nerdfont-complete'
POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

DEFAULT_USER="joshuef"



# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=$HOME/dotfiles/zsh

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(fabric node npm history zsh-z git-flow zsh-syntax-highlighting zsh-autosuggestions)
 # zsh-dircolors-solarized
# User configuration

# Load the shell dotfiles
# for file in $HOME/.{shell_exports,shell_aliases,shell_functions,shell_config}; do
#   [ -r "$file" ] && [ -f "$file" ] && source "$file";
# done;
# unset file;
#
# if [ -f `brew --prefix`/etc/bash_completion ]; then
#   . `brew --prefix`/etc/bash_completion
# fi

# Automatically list directory contents on `cd`.
# auto-ls () {
#   emulate -L zsh;
#   # explicit sexy ls'ing as aliases arent honored in here.
#   hash gls >/dev/null 2>&1 && CLICOLOR_FORCE=1 gls -aFh --color --group-directories-first || ls
# }
# chpwd_functions=( auto-ls $chpwd_functions )

source $ZSH/oh-my-zsh.sh

# Add border to pics
borderize() {
  trap "exit;" INT SIGINT SIGTERM
  for i in `ls`
  do
      trap "exit;" INT SIGINT SIGTERM
      mkdir bordered

      name="wb_$i"
      echo "working on $name ..."
      convert $i -bordercolor white -border 7% "bordered/$name"
  done 
}

# Add border to pics
squared() {
  trap "exit;" INT SIGINT SIGTERM
  for i in `ls`
  do
      # trap "exit;" INT SIGINT SIGTERM
      mkdir -p square
      # Get trim box w, h, x, y
      IFS=" x+" read w h x y < <(convert -fuzz 10% $i -format "%@" info:)
      name="wb_sq_$i"
      echo "working on $name ..."

      # Get longest side
      longest=$w
      [ $h -gt $longest ] && longest=$h
      
          # common colours to extract
      COLORS=6

      fuzz_similar_colors=40
      
      PALETTE=$(convert $i -scale 50x50! -depth 8 \
        \( -clone 0 -colorspace HSB -channel gb -separate +channel -threshold $fuzz_similar_colors% \
        -compose multiply -composite \) \
        -alpha off -compose copy_opacity -composite sparse-color:- |\
        convert -size 50x50 xc: -sparse-color voronoi '@-' \
        +dither -colors 6 -depth 8 -format "%c" histogram:info: | awk '{print $3}') # this is which colour in the pallete to choose

      COLOR_HEX=$(echo $PALETTE | sed -n 1p)

      # Increase by 20%
      longest=$(echo "scale=0;$longest*1.1/1" | bc)
      echo $longest

      convert -fuzz 10% $i -trim -background $COLOR_HEX -gravity center -extent ${longest}x${longest} "square/$name"
      # convert -fuzz 10% $i -trim -background white -gravity center -extent ${longest}x${longest} "square/$name"
  done  
  # cleanup
  # rm hext.txt
}




# Add border to a single pic
square() {
      # Get trim box w, h, x, y
      IFS=" x+" read w h x y < <(convert -fuzz 10% $1 -format "%@" info:)
      name="wb_sq_$1"

      # Get longest side
      longest=$w
      [ $h -gt $longest ] && longest=$h

      # Increase by 20%
      longest=$(echo "scale=0;$longest*1.1/1" | bc)
      echo $longest

         
      # common colours to extract
      COLORS=6

      fuzz_similar_colors=40
      
      PALETTE=$(convert DSCF0418.jpg -scale 50x50! -depth 8 \
        \( -clone 0 -colorspace HSB -channel gb -separate +channel -threshold 40% \
        -compose multiply -composite \) \
        -alpha off -compose copy_opacity -composite sparse-color:- |\
        convert -size 50x50 xc: -sparse-color voronoi '@-' \
        +dither -colors 6 -depth 8 -format "%c" histogram:info: | awk '{print $3}') # this is which colour in the pallete to choose

      COLOR_HEX=$(echo PALETTE | sed -n 1p)

      convert -fuzz 10% $1 -trim -background $COLOR_HEX -gravity center -extent ${longest}x${longest} "$name"
}



#NVM
# Lazy NVM loading for rapid bash startup
load-nvmrc() {
  if [[ -f .node-version && -r .node-version ]]; then
    nvm use &> /dev/null
  elif [[ $(nvm version) != $(nvm version default)  ]]; then
    nvm use &> /dev/null
  fi
  # setRightPrompt
}

# Defer initialization of nvm until nvm, node or a node-dependent command is
# run. Ensure this block is only run once if .bashrc gets sourced multiple times
# by checking whether __init_nvm is a function.
# if [ -s "$HOME/.nvm/nvm.sh" ] && [ ! "$(whence -w __init_nvm)" = function ]; then
#   echo "1"
#   # export NVM_DIR="$HOME/.nvm"
#   # [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
#   export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

#   echo "1"
  
#   declare -a __node_commands=('nvm' 'node' 'npm' 'yarn' 'yo' 'gulp' 'grunt' 'webpack' 'topgun')

#   echo "1"
#   function __init_nvm() {
#       echo "1init"
    
#     for i in "${__node_commands[@]}"; do unalias $i; done
#     . "$NVM_DIR"/nvm.sh
#     unset __node_commands
#     unset -f __init_nvm
#     # add-zsh-hook chpwd load-nvmrc
#     load-nvmrc
#   }
#   for i in "${__node_commands[@]}"; do alias $i='__init_nvm && '$i; done
# fi


# load-nvmrc
# export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm



# alias
alias vi=nvim
alias vi=nvim
alias vim=nvim
alias rm=trash
alias atom=atom-beta
alias ls="ls -G"
alias cat="bat"
alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"
alias preview="fzf --preview 'bat --color \"always\" {}'"
# add support for ctrl+o to open selected file in VS Code
FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"

# no correct for command args
setopt nocorrectall; setopt correct
# alias npm=yarn


# process on port...
function pop { lsof -n -i4TCP:"$1" | grep LISTEN | awk '{print $2}' }
function kpop { pop "$1" | xargs kill  }

# export -f pop

pkg_verify() {
  if [ $# -ne 1 ]; then
    echo "Missing package to verify."
    return 1
  fi

  spctl -a -v "$1"
  codesign -v --verbose "$1"
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh



function workit { mosh --no-init --ssh="ssh -o StrictHostKeyChecking=no -i ~/.ssh/workstation_rsa -p 22" root@$WORKSTATION_IP -- tmux new-session -ADs main }



# SAFE

#local logs
# alias llogs = rm sn-node* || true && ls -1 ~/.safe/node/local-test-network | xargs -n 1 sh -c 'echo "cp ~/.safe/node/local-test-network/$1/sn_node.log $1.log"' sh | sh $1
# # last local logs (aka last 1k lines)
# alias lllogs = rm sn-node* || true && ls -1 ~/.safe/node/local-test-network | xargs -n 1 sh -c 'echo "tail  ~/.safe/node/local-test-network/$1/sn_node.log $1.log"' sh | sh $1