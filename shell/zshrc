# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export TERM="xterm-256color"

# Path to your oh-my-zsh configuration.
export ZSH=$HOME/.oh-my-zsh
# export FZF_DEFAULT_COMMAND='rg --files --hidden'
# Directories to be prepended to $PATH
declare -a dirs_to_prepend
dirs_to_prepend=(
  "/usr/local/sbin"
  "/$HOME/.local/bin"
  "/usr/local/git/bin"
  "/usr/local/"
  "/usr/local/mysql/bin"
  "/sw/bin/"
  "$HOME/dotfiles/bin"
  "$HOME/bin"
  "$HOME/.yarn/bin"
  "$HOME/.safe/cli"
  "$HOME/.cargo/bin"
  "$HOME/Library/Python/3.7/bin"
  "/snap/bin/apm"

)


# Explicitly configured $PATH
PATH="/usr/bin:/usr/local/bin:/bin:/usr/sbin:/sbin"

for dir in ${(k)dirs_to_prepend[@]}
do
  if [ -d ${dir} ]; then
    # If these directories exist, then prepend them to existing PATH
    PATH="${dir}:$PATH"
  fi
done

unset dirs_to_prepend

export PATH

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="powerlevel9k/powerlevel9k"
ZSH_THEME=powerlevel10k/powerlevel10k
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_middle"
POWERLEVEL9K_SHORTEN_DIR_LENGTH=3
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=( os_icon dir vcs )
# POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_MODE='nerdfont-complete'
# POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

DEFAULT_USER="joshuef"



# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=$HOME/dotfiles/zsh

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(fabric history zsh-z git-flow zsh-syntax-highlighting zsh-autosuggestions)
 # zsh-dircolors-solarized
# User configuration

# Load the shell dotfiles
# for file in $HOME/.{shell_exports,shell_aliases,shell_functions,shell_config}; do
#   [ -r "$file" ] && [ -f "$file" ] && source "$file";
# done;
# unset file;
#
# if [ -f `brew --prefix`/etc/bash_completion ]; then
#   . `brew --prefix`/etc/bash_completion
# fi

# Automatically list directory contents on `cd`.
# auto-ls () {
#   emulate -L zsh;
#   # explicit sexy ls'ing as aliases arent honored in here.
#   hash gls >/dev/null 2>&1 && CLICOLOR_FORCE=1 gls -aFh --color --group-directories-first || ls
# }
# chpwd_functions=( auto-ls $chpwd_functions )

source $ZSH/oh-my-zsh.sh

# Add border to pics
borderize() {
  trap "exit;" INT SIGINT SIGTERM
  for i in `ls`
  do
      trap "exit;" INT SIGINT SIGTERM
      mkdir bordered

      name="wb_$i"
      echo "working on $name ..."
      convert $i -bordercolor white -border 7% "bordered/$name"
  done
}

# Add border to pics
squared() {
  rm -rf square
  trap "exit;" INT SIGINT SIGTERM
  for i in `ls -p | grep -v '/$'` #no dirs
  do
      mkdir -p square
      # Get trim box w, h, x, y
      IFS=" x+" read w h x y < <(convert -fuzz 10% $i -format "%@" info:)
      name="wb_sq_$i"
      # strip extension... assume jpg for now (down below when we save)
      name=$(echo "$name" | cut -f 1 -d '.')
      echo "working on $name ..."

      # Get longest side
      longest=$w
      [ $h -gt $longest ] && longest=$h

      diff=$(echo "$w-$h" | bc)
      # convert to positive if neg
      (( diff = $diff < 0 ? $diff * -1 : $diff ))
      echo "diff is $diff"

      # common colours to extract
      COLORS=6

      fuzz_similar_colors=25

      PALETTE=$(convert $i -scale 50x50! -depth 8 \
        \( -clone 0 -colorspace HSB -channel gb -separate +channel -threshold $fuzz_similar_colors% \
        -compose multiply -composite \) \
        -alpha off -compose copy_opacity -composite sparse-color:- |\
        convert -size 50x50 xc: -sparse-color voronoi '@-' \
        +dither -colors $COLORS -depth 8 -format "%c" histogram:info: | awk '{print $3}')

      SUB='error'

      if grep -q "$SUB" <<< "$PALETTE"; then
        echo "It's there"
        PALETTE="grey"
      fi

      # add border
      # border=50
      # convert $i -bordercolor black -border $border "$TMPDIR/border_pic_$i"

      # reset longest measurement
      # IFS=" x+" read w h x y < <(convert $TMPDIR/border_pic_$i -format "%@" info:)
      # longest=$(echo "scale=0;$longest*1.1/1" | bc)
      # longest=$w
      # [ $h -gt $longest ] && longest=$h


      # Increase by 20%
      longest=$(echo "scale=0;$longest*1.1/1" | bc)

      # increase for more border if not enough added
      padding=0
      (( padding = $diff < 850 ? 50 : $padding ))
      (( padding = $diff < 800 ? 100 : $padding ))
      (( padding = $diff < 750 ? 150 : $padding ))
      (( padding = $diff < 700 ? 200 : $padding ))
      (( padding = $diff < 650 ? 250 : $padding ))
      (( padding = $diff < 600 ? 300 : $padding ))
      (( padding = $diff < 550 ? 350 : $padding ))
      (( padding = $diff < 500 ? 400 : $padding ))
      (( padding = $diff < 450 ? 450 : $padding ))
      (( padding = $diff < 400 ? 500 : $padding ))
      (( padding = $diff < 350 ? 550 : $padding ))
      (( padding = $diff < 300 ? 600 : $padding ))
      (( padding = $diff < 250 ? 650 : $padding ))
      (( padding = $diff < 200 ? 700 : $padding ))
      (( padding = $diff < 150 ? 750 : $padding ))
      (( padding = $diff < 100 ? 800 : $padding ))

      longest=$(expr $longest + $padding)
      echo $longest

      found_colors=$(echo "$PALETTE" | wc -l)

    for (( y=1; y<found_colors; ++y)); do

      # this is which colour in the pallete to choose
      line=${y}p

      COLOR_HEX=$(echo $PALETTE | sed -n $line)
      echo "hex used is:   $COLOR_HEX"
      convert $i -background $COLOR_HEX -gravity center -extent ${longest}x${longest} "square/${name}_${y}.jpg"
    done

    convert $i -background white -gravity center -extent ${longest}x${longest} "square/${name}_white.jpg"

  done
}




# Add border to a single pic
square() {
      # Get trim box w, h, x, y
      IFS=" x+" read w h x y < <(convert -fuzz 10% $1 -format "%@" info:)
      name="wb_sq_$1"

      # Get longest side
      longest=$w
      [ $h -gt $longest ] && longest=$h

      # Increase by 20%
      longest=$(echo "scale=0;$longest*1.1/1" | bc)
      echo $longest


      # common colours to extract
      COLORS=6

      fuzz_similar_colors=40

      PALETTE=$(convert DSCF0418.jpg -scale 50x50! -depth 8 \
        \( -clone 0 -colorspace HSB -channel gb -separate +channel -threshold 40% \
        -compose multiply -composite \) \
        -alpha off -compose copy_opacity -composite sparse-color:- |\
        convert -size 50x50 xc: -sparse-color voronoi '@-' \
        +dither -colors 6 -depth 8 -format "%c" histogram:info: | awk '{print $3}') # this is which colour in the pallete to choose

      COLOR_HEX=$(echo PALETTE | sed -n 1p)

      convert -fuzz 10% $1 -trim -background $COLOR_HEX -gravity center -extent ${longest}x${longest} "$name"
}



# alias
alias vi=nvim
alias vi=nvim
alias vim=nvim
alias rm=trash
alias atom=atom-beta
alias ls="ls -G"
alias cat="bat"
alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"
alias preview="fzf --preview 'bat --color \"always\" {}'"
# add support for ctrl+o to open selected file in VS Code
FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"


# no correct for command args
setopt nocorrectall; setopt correct
# alias npm=yarn

# rip grep terraform/testnetworkspace logs
function rgt() {
    rg "$1" ./logs/$(terraform workspace show) -u $2
}

# ripgrep testnet but only latest log files
function rgtl() {
    rg "$1" ./logs/$(terraform workspace show)/**/sn_node.log -u $2
}

# rip grep local network workspace logs
function rgl() {
    rg "$1" ~/.safe/node/local-test-network $2
}
# rip grep local latest only... network workspace logs
function rgll() {
    rg "$1" ~/.safe/node/local-test-network/**/sn_node.log $2
}
# ripgrep last lines matching
function rglst
{
    for log in  ~/.safe/node/local-test-network/sn-node-*/*.log
    do
        echo -e "\n\033[0;33m${log}\033[0m"
        rg --color=always "$1" "$log" | tail -n1
    done
}

# rip grep genesis workspace logs
function rgg() {
    genesis_ip=$(cat $(terraform workspace show)-genesis-ip)
    rg "$1" ./logs/$(terraform workspace show)/${genesis_ip}/* -u -c
}

# ssh into terraform genesis node
function sshgen() {
  ssh root@$(cat $(terraform workspace show)-genesis-ip)
}

# process on port...
function pop { lsof -n -i4TCP:"$1" | grep LISTEN | awk '{print $2}' }
function kpop { pop "$1" | xargs kill  }

# export -f pop

pkg_verify() {
  if [ $# -ne 1 ]; then
    echo "Missing package to verify."
    return 1
  fi

  spctl -a -v "$1"
  codesign -v --verbose "$1"
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh



function workit { mosh --no-init --ssh="ssh -o StrictHostKeyChecking=no -i ~/.ssh/workstation_rsa -p 22" root@$WORKSTATION_IP -- tmux new-session -ADs main }



# SAFE

#local logs
# alias llogs = rm sn-node* || true && ls -1 ~/.safe/node/local-test-network | xargs -n 1 sh -c 'echo "cp ~/.safe/node/local-test-network/$1/sn_node.log $1.log"' sh | sh $1
# # last local logs (aka last 1k lines)
# alias lllogs = rm sn-node* || true && ls -1 ~/.safe/node/local-test-network | xargs -n 1 sh -c 'echo "tail  ~/.safe/node/local-test-network/$1/sn_node.log $1.log"' sh | sh $1

# add heaptrack to all local nodes
hep_nodes() {
  nodes_dir=~/.safe/node/local-test-network
  for i in $(ls $nodes_dir); do
    # echo "$nodes_dir/$i/sn_node.log";
    heaptrack --pid  $(cat $nodes_dir/$i/sn_node.log.* | rg "Node PID" | awk '{print $8}' |sed 's/.$//') &;
  done;

}

# analyze all heaptracks in current dir
alyz() {
  nodes_dir=~/.safe/node/local-test-network
  for i in ./heaptrack*; do
    heaptrack --analyze $i &;
  done;

}

# get peak mem from all heaptracked nodes
peak() {
  nodes_dir=~/.safe/node/local-test-network
  for i in ./heaptrack*; do
    heaptrack_print $i | rg "peak heap";
  done;

}




# augment the `time` command to give mem too
if [[ `uname` == Darwin ]]; then
    MAX_MEMORY_UNITS=KB
else
    MAX_MEMORY_UNITS=MB
fi
TIMEFMT='%J   %U  user %S system %P cpu %*E total'$'\n'\
'avg shared (code):         %X KB'$'\n'\
'avg unshared (data/stack): %D KB'$'\n'\
'total (sum):               %K KB'$'\n'\
'max memory:                %M '$MAX_MEMORY_UNITS''$'\n'\
'page faults from disk:     %F'$'\n'\
'other page faults:         %R'

eval "$(/opt/homebrew/bin/brew shellenv)"

# fnm
export PATH=/home/josh/.fnm:$PATH
eval "`fnm env`"

eval "$(direnv hook zsh)"


untilfail() {
  while "$@"; do :; done
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
