(function() {
  var findClosingIndex, ref, split;

  ref = require('../lib/utils'), findClosingIndex = ref.findClosingIndex, split = ref.split;

  describe('.split()', function() {
    var tests;
    tests = [['a,b,c', ['a', 'b', 'c']], ['a,b(),c', ['a', 'b()', 'c']], ['a,b(c)', ['a', 'b(c)']], ['a,(b, c)', ['a', '(b,c)']], ['a,(b, c())', ['a', '(b,c())']], ['a(b, c())', ['a(b,c())']], ['a,)(', ['a']], ['a(,', []], ['(,', []], ['(,(,(,)', []], ['a,(,', ['a']], ['a,((),', ['a']], ['a,()),', ['a', '()']]];
    return tests.forEach(function(arg) {
      var expected, source;
      source = arg[0], expected = arg[1];
      return it("splits " + (jasmine.pp(source)) + " as " + (jasmine.pp(expected)), function() {
        return expect(split(source)).toEqual(expected);
      });
    });
  });

  describe('.findClosingIndex()', function() {
    var tests;
    tests = [['a(', -1], ['a()', 2], ['a(((()', -1]];
    return tests.forEach(function(arg) {
      var expected, source;
      source = arg[0], expected = arg[1];
      return it("returs the index of the closing character", function() {
        return expect(findClosingIndex(source, 2, '(', ')')).toEqual(expected);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2pvc2gvLmF0b20vcGFja2FnZXMvcGlnbWVudHMvc3BlYy91dGlscy1zcGVjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBNEIsT0FBQSxDQUFRLGNBQVIsQ0FBNUIsRUFBQyx1Q0FBRCxFQUFtQjs7RUFFbkIsUUFBQSxDQUFTLFVBQVQsRUFBcUIsU0FBQTtBQUNuQixRQUFBO0lBQUEsS0FBQSxHQUFRLENBQ04sQ0FBQyxPQUFELEVBQVUsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsQ0FBVixDQURNLEVBRU4sQ0FBQyxTQUFELEVBQVksQ0FBQyxHQUFELEVBQU0sS0FBTixFQUFhLEdBQWIsQ0FBWixDQUZNLEVBR04sQ0FBQyxRQUFELEVBQVcsQ0FBQyxHQUFELEVBQU0sTUFBTixDQUFYLENBSE0sRUFJTixDQUFDLFVBQUQsRUFBYSxDQUFDLEdBQUQsRUFBTSxPQUFOLENBQWIsQ0FKTSxFQUtOLENBQUMsWUFBRCxFQUFlLENBQUMsR0FBRCxFQUFNLFNBQU4sQ0FBZixDQUxNLEVBTU4sQ0FBQyxXQUFELEVBQWMsQ0FBQyxVQUFELENBQWQsQ0FOTSxFQU9OLENBQUMsTUFBRCxFQUFTLENBQUMsR0FBRCxDQUFULENBUE0sRUFRTixDQUFDLEtBQUQsRUFBUSxFQUFSLENBUk0sRUFTTixDQUFDLElBQUQsRUFBTyxFQUFQLENBVE0sRUFVTixDQUFDLFNBQUQsRUFBWSxFQUFaLENBVk0sRUFXTixDQUFDLE1BQUQsRUFBUyxDQUFDLEdBQUQsQ0FBVCxDQVhNLEVBWU4sQ0FBQyxRQUFELEVBQVcsQ0FBQyxHQUFELENBQVgsQ0FaTSxFQWFOLENBQUMsUUFBRCxFQUFXLENBQUMsR0FBRCxFQUFNLElBQU4sQ0FBWCxDQWJNO1dBZ0JSLEtBQUssQ0FBQyxPQUFOLENBQWMsU0FBQyxHQUFEO0FBQ1osVUFBQTtNQURjLGlCQUFRO2FBQ3RCLEVBQUEsQ0FBRyxTQUFBLEdBQVMsQ0FBQyxPQUFPLENBQUMsRUFBUixDQUFXLE1BQVgsQ0FBRCxDQUFULEdBQTRCLE1BQTVCLEdBQWlDLENBQUMsT0FBTyxDQUFDLEVBQVIsQ0FBVyxRQUFYLENBQUQsQ0FBcEMsRUFBNkQsU0FBQTtlQUMzRCxNQUFBLENBQU8sS0FBQSxDQUFNLE1BQU4sQ0FBUCxDQUFxQixDQUFDLE9BQXRCLENBQThCLFFBQTlCO01BRDJELENBQTdEO0lBRFksQ0FBZDtFQWpCbUIsQ0FBckI7O0VBcUJBLFFBQUEsQ0FBUyxxQkFBVCxFQUFnQyxTQUFBO0FBQzlCLFFBQUE7SUFBQSxLQUFBLEdBQVEsQ0FDTixDQUFDLElBQUQsRUFBTyxDQUFDLENBQVIsQ0FETSxFQUVOLENBQUMsS0FBRCxFQUFRLENBQVIsQ0FGTSxFQUdOLENBQUMsUUFBRCxFQUFXLENBQUMsQ0FBWixDQUhNO1dBTVIsS0FBSyxDQUFDLE9BQU4sQ0FBYyxTQUFDLEdBQUQ7QUFDWixVQUFBO01BRGMsaUJBQVE7YUFDdEIsRUFBQSxDQUFHLDJDQUFILEVBQWdELFNBQUE7ZUFDOUMsTUFBQSxDQUFPLGdCQUFBLENBQWlCLE1BQWpCLEVBQXlCLENBQXpCLEVBQTRCLEdBQTVCLEVBQWlDLEdBQWpDLENBQVAsQ0FBNkMsQ0FBQyxPQUE5QyxDQUFzRCxRQUF0RDtNQUQ4QyxDQUFoRDtJQURZLENBQWQ7RUFQOEIsQ0FBaEM7QUF2QkEiLCJzb3VyY2VzQ29udGVudCI6WyJ7ZmluZENsb3NpbmdJbmRleCwgc3BsaXR9ID0gcmVxdWlyZSAnLi4vbGliL3V0aWxzJ1xuXG5kZXNjcmliZSAnLnNwbGl0KCknLCAtPlxuICB0ZXN0cyA9IFtcbiAgICBbJ2EsYixjJywgWydhJywgJ2InLCAnYyddXVxuICAgIFsnYSxiKCksYycsIFsnYScsICdiKCknLCAnYyddXVxuICAgIFsnYSxiKGMpJywgWydhJywgJ2IoYyknXV1cbiAgICBbJ2EsKGIsIGMpJywgWydhJywgJyhiLGMpJ11dXG4gICAgWydhLChiLCBjKCkpJywgWydhJywgJyhiLGMoKSknXV1cbiAgICBbJ2EoYiwgYygpKScsIFsnYShiLGMoKSknXV1cbiAgICBbJ2EsKSgnLCBbJ2EnXV1cbiAgICBbJ2EoLCcsIFtdXVxuICAgIFsnKCwnLCBbXV1cbiAgICBbJygsKCwoLCknLCBbXV1cbiAgICBbJ2EsKCwnLCBbJ2EnXV1cbiAgICBbJ2EsKCgpLCcsIFsnYSddXVxuICAgIFsnYSwoKSksJywgWydhJywgJygpJ11dXG4gIF1cblxuICB0ZXN0cy5mb3JFYWNoIChbc291cmNlLCBleHBlY3RlZF0pIC0+XG4gICAgaXQgXCJzcGxpdHMgI3tqYXNtaW5lLnBwIHNvdXJjZX0gYXMgI3tqYXNtaW5lLnBwKGV4cGVjdGVkKX1cIiwgLT5cbiAgICAgIGV4cGVjdChzcGxpdChzb3VyY2UpKS50b0VxdWFsKGV4cGVjdGVkKVxuXG5kZXNjcmliZSAnLmZpbmRDbG9zaW5nSW5kZXgoKScsIC0+XG4gIHRlc3RzID0gW1xuICAgIFsnYSgnLCAtMV1cbiAgICBbJ2EoKScsIDJdXG4gICAgWydhKCgoKCknLCAtMV1cbiAgXVxuXG4gIHRlc3RzLmZvckVhY2ggKFtzb3VyY2UsIGV4cGVjdGVkXSkgLT5cbiAgICBpdCBcInJldHVycyB0aGUgaW5kZXggb2YgdGhlIGNsb3NpbmcgY2hhcmFjdGVyXCIsIC0+XG4gICAgICBleHBlY3QoZmluZENsb3NpbmdJbmRleChzb3VyY2UsIDIsICcoJywgJyknKSkudG9FcXVhbChleHBlY3RlZClcbiJdfQ==
