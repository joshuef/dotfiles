(function() {
  var MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES, NAMESPACE, PackageUpdater, WARMUP_WAIT, fs, getFs, path;

  fs = null;

  path = null;

  PackageUpdater = null;

  getFs = function() {
    return fs != null ? fs : fs = require('fs-plus');
  };

  NAMESPACE = 'auto-update-packages';

  WARMUP_WAIT = 10 * 1000;

  MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES = 15;

  module.exports = {
    config: {
      intervalMinutes: {
        type: 'integer',
        minimum: MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES,
        "default": 6 * 60,
        title: 'Auto-Update Interval Minutes'
      }
    },
    activate: function(state) {
      var commands;
      commands = {};
      commands[NAMESPACE + ":update-now"] = (function(_this) {
        return function() {
          return _this.updatePackages(false);
        };
      })(this);
      this.commandSubscription = atom.commands.add('atom-workspace', commands);
      return setTimeout((function(_this) {
        return function() {
          return _this.enableAutoUpdate();
        };
      })(this), WARMUP_WAIT);
    },
    deactivate: function() {
      var ref;
      this.disableAutoUpdate();
      if ((ref = this.commandSubscription) != null) {
        ref.dispose();
      }
      return this.commandSubscription = null;
    },
    enableAutoUpdate: function() {
      this.updatePackagesIfAutoUpdateBlockIsExpired();
      this.autoUpdateCheck = setInterval((function(_this) {
        return function() {
          return _this.updatePackagesIfAutoUpdateBlockIsExpired();
        };
      })(this), this.getAutoUpdateCheckInterval());
      return this.configSubscription = atom.config.onDidChange(NAMESPACE, (function(_this) {
        return function() {
          _this.disableAutoUpdate();
          return _this.enableAutoUpdate();
        };
      })(this));
    },
    disableAutoUpdate: function() {
      var ref;
      if ((ref = this.configSubscription) != null) {
        ref.dispose();
      }
      this.configSubscription = null;
      if (this.autoUpdateCheck) {
        clearInterval(this.autoUpdateCheck);
      }
      return this.autoUpdateCheck = null;
    },
    updatePackagesIfAutoUpdateBlockIsExpired: function() {
      var lastUpdateTime;
      lastUpdateTime = this.loadLastUpdateTime() || 0;
      if (Date.now() > lastUpdateTime + this.getAutoUpdateBlockDuration()) {
        return this.updatePackages();
      }
    },
    updatePackages: function(isAutoUpdate) {
      if (isAutoUpdate == null) {
        isAutoUpdate = true;
      }
      if (PackageUpdater == null) {
        PackageUpdater = require('./package-updater');
      }
      PackageUpdater.updatePackages(isAutoUpdate);
      return this.saveLastUpdateTime();
    },
    getAutoUpdateBlockDuration: function() {
      var minutes;
      minutes = atom.config.get(NAMESPACE + ".intervalMinutes");
      if (isNaN(minutes) || minutes < MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES) {
        minutes = MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES;
      }
      return minutes * 60 * 1000;
    },
    getAutoUpdateCheckInterval: function() {
      return this.getAutoUpdateBlockDuration() / 15;
    },
    loadLastUpdateTime: function() {
      var string;
      try {
        string = getFs().readFileSync(this.getLastUpdateTimeFilePath());
        return parseInt(string);
      } catch (error) {
        return null;
      }
    },
    saveLastUpdateTime: function() {
      return getFs().writeFileSync(this.getLastUpdateTimeFilePath(), Date.now().toString());
    },
    getLastUpdateTimeFilePath: function() {
      var dotAtomPath;
      if (path == null) {
        path = require('path');
      }
      dotAtomPath = getFs().absolute('~/.atom');
      return path.join(dotAtomPath, 'storage', NAMESPACE + "-last-update-time");
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2pvc2gvLmF0b20vcGFja2FnZXMvYXV0by11cGRhdGUtcGFja2FnZXMvbGliL2F1dG8tdXBkYXRlLXBhY2thZ2VzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsRUFBQSxHQUFLOztFQUNMLElBQUEsR0FBTzs7RUFDUCxjQUFBLEdBQWlCOztFQUVqQixLQUFBLEdBQVEsU0FBQTt3QkFDTixLQUFBLEtBQU0sT0FBQSxDQUFRLFNBQVI7RUFEQTs7RUFHUixTQUFBLEdBQVk7O0VBQ1osV0FBQSxHQUFjLEVBQUEsR0FBSzs7RUFDbkIsMENBQUEsR0FBNkM7O0VBRTdDLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7SUFBQSxNQUFBLEVBQ0U7TUFBQSxlQUFBLEVBQ0U7UUFBQSxJQUFBLEVBQU0sU0FBTjtRQUNBLE9BQUEsRUFBUywwQ0FEVDtRQUVBLENBQUEsT0FBQSxDQUFBLEVBQVMsQ0FBQSxHQUFJLEVBRmI7UUFHQSxLQUFBLEVBQU8sOEJBSFA7T0FERjtLQURGO0lBT0EsUUFBQSxFQUFVLFNBQUMsS0FBRDtBQUNSLFVBQUE7TUFBQSxRQUFBLEdBQVc7TUFDWCxRQUFTLENBQUcsU0FBRCxHQUFXLGFBQWIsQ0FBVCxHQUFzQyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7aUJBQUcsS0FBQyxDQUFBLGNBQUQsQ0FBZ0IsS0FBaEI7UUFBSDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7TUFDdEMsSUFBQyxDQUFBLG1CQUFELEdBQXVCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBZCxDQUFrQixnQkFBbEIsRUFBb0MsUUFBcEM7YUFFdkIsVUFBQSxDQUFXLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFDVCxLQUFDLENBQUEsZ0JBQUQsQ0FBQTtRQURTO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFYLEVBRUUsV0FGRjtJQUxRLENBUFY7SUFnQkEsVUFBQSxF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LFNBQXZCLEVBQXFDLFNBQUQsR0FBVyxtQkFBL0M7SUFIeUIsQ0F4RTNCOztBQVpGIiwic291cmNlc0NvbnRlbnQiOlsiZnMgPSBudWxsXG5wYXRoID0gbnVsbFxuUGFja2FnZVVwZGF0ZXIgPSBudWxsXG5cbmdldEZzID0gLT5cbiAgZnMgPz0gcmVxdWlyZSAnZnMtcGx1cydcblxuTkFNRVNQQUNFID0gJ2F1dG8tdXBkYXRlLXBhY2thZ2VzJ1xuV0FSTVVQX1dBSVQgPSAxMCAqIDEwMDBcbk1JTklNVU1fQVVUT19VUERBVEVfQkxPQ0tfRFVSQVRJT05fTUlOVVRFUyA9IDE1XG5cbm1vZHVsZS5leHBvcnRzID1cbiAgY29uZmlnOlxuICAgIGludGVydmFsTWludXRlczpcbiAgICAgIHR5cGU6ICdpbnRlZ2VyJ1xuICAgICAgbWluaW11bTogTUlOSU1VTV9BVVRPX1VQREFURV9CTE9DS19EVVJBVElPTl9NSU5VVEVTXG4gICAgICBkZWZhdWx0OiA2ICogNjBcbiAgICAgIHRpdGxlOiAnQXV0by1VcGRhdGUgSW50ZXJ2YWwgTWludXRlcydcblxuICBhY3RpdmF0ZTogKHN0YXRlKSAtPlxuICAgIGNvbW1hbmRzID0ge31cbiAgICBjb21tYW5kc1tcIiN7TkFNRVNQQUNFfTp1cGRhdGUtbm93XCJdID0gPT4gQHVwZGF0ZVBhY2thZ2VzKGZhbHNlKVxuICAgIEBjb21tYW5kU3Vic2NyaXB0aW9uID0gYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20td29ya3NwYWNlJywgY29tbWFuZHMpXG5cbiAgICBzZXRUaW1lb3V0ID0+XG4gICAgICBAZW5hYmxlQXV0b1VwZGF0ZSgpXG4gICAgLCBXQVJNVVBfV0FJVFxuXG4gIGRlYWN0aXZhdGU6IC0+XG4gICAgQGRpc2FibGVBdXRvVXBkYXRlKClcbiAgICBAY29tbWFuZFN1YnNjcmlwdGlvbj8uZGlzcG9zZSgpXG4gICAgQGNvbW1hbmRTdWJzY3JpcHRpb24gPSBudWxsXG5cbiAgZW5hYmxlQXV0b1VwZGF0ZTogLT5cbiAgICBAdXBkYXRlUGFja2FnZXNJZkF1dG9VcGRhdGVCbG9ja0lzRXhwaXJlZCgpXG5cbiAgICBAYXV0b1VwZGF0ZUNoZWNrID0gc2V0SW50ZXJ2YWwgPT5cbiAgICAgIEB1cGRhdGVQYWNrYWdlc0lmQXV0b1VwZGF0ZUJsb2NrSXNFeHBpcmVkKClcbiAgICAsIEBnZXRBdXRvVXBkYXRlQ2hlY2tJbnRlcnZhbCgpXG5cbiAgICBAY29uZmlnU3Vic2NyaXB0aW9uID0gYXRvbS5jb25maWcub25EaWRDaGFuZ2UgTkFNRVNQQUNFLCA9PlxuICAgICAgQGRpc2FibGVBdXRvVXBkYXRlKClcbiAgICAgIEBlbmFibGVBdXRvVXBkYXRlKClcblxuICBkaXNhYmxlQXV0b1VwZGF0ZTogLT5cbiAgICBAY29uZmlnU3Vic2NyaXB0aW9uPy5kaXNwb3NlKClcbiAgICBAY29uZmlnU3Vic2NyaXB0aW9uID0gbnVsbFxuXG4gICAgY2xlYXJJbnRlcnZhbChAYXV0b1VwZGF0ZUNoZWNrKSBpZiBAYXV0b1VwZGF0ZUNoZWNrXG4gICAgQGF1dG9VcGRhdGVDaGVjayA9IG51bGxcblxuICB1cGRhdGVQYWNrYWdlc0lmQXV0b1VwZGF0ZUJsb2NrSXNFeHBpcmVkOiAtPlxuICAgIGxhc3RVcGRhdGVUaW1lID0gQGxvYWRMYXN0VXBkYXRlVGltZSgpIHx8IDBcbiAgICBpZiBEYXRlLm5vdygpID4gbGFzdFVwZGF0ZVRpbWUgKyBAZ2V0QXV0b1VwZGF0ZUJsb2NrRHVyYXRpb24oKVxuICAgICAgQHVwZGF0ZVBhY2thZ2VzKClcblxuICB1cGRhdGVQYWNrYWdlczogKGlzQXV0b1VwZGF0ZSA9IHRydWUpIC0+XG4gICAgUGFja2FnZVVwZGF0ZXIgPz0gcmVxdWlyZSAnLi9wYWNrYWdlLXVwZGF0ZXInXG4gICAgUGFja2FnZVVwZGF0ZXIudXBkYXRlUGFja2FnZXMoaXNBdXRvVXBkYXRlKVxuICAgIEBzYXZlTGFzdFVwZGF0ZVRpbWUoKVxuXG4gIGdldEF1dG9VcGRhdGVCbG9ja0R1cmF0aW9uOiAtPlxuICAgIG1pbnV0ZXMgPSBhdG9tLmNvbmZpZy5nZXQoXCIje05BTUVTUEFDRX0uaW50ZXJ2YWxNaW51dGVzXCIpXG5cbiAgICBpZiBpc05hTihtaW51dGVzKSB8fCBtaW51dGVzIDwgTUlOSU1VTV9BVVRPX1VQREFURV9CTE9DS19EVVJBVElPTl9NSU5VVEVTXG4gICAgICBtaW51dGVzID0gTUlOSU1VTV9BVVRPX1VQREFURV9CTE9DS19EVVJBVElPTl9NSU5VVEVTXG5cbiAgICBtaW51dGVzICogNjAgKiAxMDAwXG5cbiAgZ2V0QXV0b1VwZGF0ZUNoZWNrSW50ZXJ2YWw6IC0+XG4gICAgQGdldEF1dG9VcGRhdGVCbG9ja0R1cmF0aW9uKCkgLyAxNVxuXG4gICMgYXV0by11cGdyYWRlLXBhY2thZ2VzIHJ1bnMgb24gZWFjaCBBdG9tIGluc3RhbmNlLFxuICAjIHNvIHdlIG5lZWQgdG8gc2hhcmUgdGhlIGxhc3QgdXBkYXRlZCB0aW1lIHZpYSBhIGZpbGUgYmV0d2VlbiB0aGUgaW5zdGFuY2VzLlxuICBsb2FkTGFzdFVwZGF0ZVRpbWU6IC0+XG4gICAgdHJ5XG4gICAgICBzdHJpbmcgPSBnZXRGcygpLnJlYWRGaWxlU3luYyhAZ2V0TGFzdFVwZGF0ZVRpbWVGaWxlUGF0aCgpKVxuICAgICAgcGFyc2VJbnQoc3RyaW5nKVxuICAgIGNhdGNoXG4gICAgICBudWxsXG5cbiAgc2F2ZUxhc3RVcGRhdGVUaW1lOiAtPlxuICAgIGdldEZzKCkud3JpdGVGaWxlU3luYyhAZ2V0TGFzdFVwZGF0ZVRpbWVGaWxlUGF0aCgpLCBEYXRlLm5vdygpLnRvU3RyaW5nKCkpXG5cbiAgZ2V0TGFzdFVwZGF0ZVRpbWVGaWxlUGF0aDogLT5cbiAgICBwYXRoID89IHJlcXVpcmUgJ3BhdGgnXG4gICAgZG90QXRvbVBhdGggPSBnZXRGcygpLmFic29sdXRlKCd+Ly5hdG9tJylcbiAgICBwYXRoLmpvaW4oZG90QXRvbVBhdGgsICdzdG9yYWdlJywgXCIje05BTUVTUEFDRX0tbGFzdC11cGRhdGUtdGltZVwiKVxuIl19
