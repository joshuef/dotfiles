(function() {
  var Color, Palette;

  require('./helpers/matchers');

  Color = require('../lib/color');

  Palette = require('../lib/palette');

  describe('Palette', function() {
    var colors, createVar, palette, ref;
    ref = [], palette = ref[0], colors = ref[1];
    createVar = function(name, color, path, line) {
      return {
        name: name,
        color: color,
        path: path,
        line: line
      };
    };
    beforeEach(function() {
      colors = [createVar('red', new Color('#ff0000'), 'file.styl', 0), createVar('green', new Color('#00ff00'), 'file.styl', 1), createVar('blue', new Color('#0000ff'), 'file.styl', 2), createVar('redCopy', new Color('#ff0000'), 'file.styl', 3), createVar('red', new Color('#ff0000'), 'file2.styl', 0)];
      return palette = new Palette(colors);
    });
    describe('::getColorsCount', function() {
      return it('returns the number of colors in the palette', function() {
        return expect(palette.getColorsCount()).toEqual(5);
      });
    });
    describe('::getColorsNames', function() {
      return it('returns the names of the colors in the palette', function() {
        return expect(palette.getColorsNames()).toEqual(['red', 'green', 'blue', 'redCopy', 'red']);
      });
    });
    describe('::sortedByName', function() {
      return it('returns the colors and names sorted by name', function() {
        return expect(palette.sortedByName()).toEqual([colors[2], colors[1], colors[0], colors[4], colors[3]]);
      });
    });
    return describe('::sortedByColor', function() {
      return it('returns the colors and names sorted by colors', function() {
        return expect(palette.sortedByColor()).toEqual([colors[0], colors[3], colors[4], colors[1], colors[2]]);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2pvc2gvLmF0b20vcGFja2FnZXMvcGlnbWVudHMvc3BlYy9wYWxldHRlLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxPQUFBLENBQVEsb0JBQVI7O0VBRUEsS0FBQSxHQUFRLE9BQUEsQ0FBUSxjQUFSOztFQUNSLE9BQUEsR0FBVSxPQUFBLENBQVEsZ0JBQVI7O0VBRVYsUUFBQSxDQUFTLFNBQVQsRUFBb0IsU0FBQTtBQUNsQixRQUFBO0lBQUEsTUFBb0IsRUFBcEIsRUFBQyxnQkFBRCxFQUFVO0lBRVYsU0FBQSxHQUFZLFNBQUMsSUFBRCxFQUFPLEtBQVAsRUFBYyxJQUFkLEVBQW9CLElBQXBCO2FBQ1Y7UUFBQyxNQUFBLElBQUQ7UUFBTyxPQUFBLEtBQVA7UUFBYyxNQUFBLElBQWQ7UUFBb0IsTUFBQSxJQUFwQjs7SUFEVTtJQUdaLFVBQUEsQ0FBVyxTQUFBO01BQ1QsTUFBQSxHQUFTLENBQ1AsU0FBQSxDQUFVLEtBQVYsRUFBcUIsSUFBQSxLQUFBLENBQU0sU0FBTixDQUFyQixFQUF1QyxXQUF2QyxFQUFvRCxDQUFwRCxDQURPLEVBRVAsU0FBQSxDQUFVLE9BQVYsRUFBdUIsSUFBQSxLQUFBLENBQU0sU0FBTixDQUF2QixFQUF5QyxXQUF6QyxFQUFzRCxDQUF0RCxDQUZPLEVBR1AsU0FBQSxDQUFVLE1BQVYsRUFBc0IsSUFBQSxLQUFBLENBQU0sU0FBTixDQUF0QixFQUF3QyxXQUF4QyxFQUFxRCxDQUFyRCxDQUhPLEVBSVAsU0FBQSxDQUFVLFNBQVYsRUFBeUIsSUFBQSxLQUFBLENBQU0sU0FBTixDQUF6QixFQUEyQyxXQUEzQyxFQUF3RCxDQUF4RCxDQUpPLEVBS1AsU0FBQSxDQUFVLEtBQVYsRUFBcUIsSUFBQSxLQUFBLENBQU0sU0FBTixDQUFyQixFQUF1QyxZQUF2QyxFQUFxRCxDQUFyRCxDQUxPO2FBT1QsT0FBQSxHQUFjLElBQUEsT0FBQSxDQUFRLE1BQVI7SUFSTCxDQUFYO0lBVUEsUUFBQSxDQUFTLGtCQUFULEVBQTZCLFNBQUE7YUFDM0IsRUFBQSxDQUFHLDZDQUFILEVBQWtELFNBQUE7ZUFDaEQsTUFBQSxDQUFPLE9BQU8sQ0FBQyxjQUFSLENBQUEsQ0FBUCxDQUFnQyxDQUFDLE9BQWpDLENBQXlDLENBQXpDO01BRGdELENBQWxEO0lBRDJCLENBQTdCO0lBSUEsUUFBQSxDQUFTLGtCQUFULEVBQTZCLFNBQUE7YUFDM0IsRUFBQSxDQUFHLGdEQUFILEVBQXFELFNBQUE7ZUFDbkQsTUFBQSxDQUFPLE9BQU8sQ0FBQyxjQUFSLENBQUEsQ0FBUCxDQUFnQyxDQUFDLE9BQWpDLENBQXlDLENBQ3ZDLEtBRHVDLEVBRXZDLE9BRnVDLEVBR3ZDLE1BSHVDLEVBSXZDLFNBSnVDLEVBS3ZDLEtBTHVDLENBQXpDO01BRG1ELENBQXJEO0lBRDJCLENBQTdCO0lBVUEsUUFBQSxDQUFTLGdCQUFULEVBQTJCLFNBQUE7YUFDekIsRUFBQSxDQUFHLDZDQUFILEVBQWtELFNBQUE7ZUFDaEQsTUFBQSxDQUFPLE9BQU8sQ0FBQyxZQUFSLENBQUEsQ0FBUCxDQUE4QixDQUFDLE9BQS9CLENBQXVDLENBQ3JDLE1BQU8sQ0FBQSxDQUFBLENBRDhCLEVBRXJDLE1BQU8sQ0FBQSxDQUFBLENBRjhCLEVBR3JDLE1BQU8sQ0FBQSxDQUFBLENBSDhCLEVBSXJDLE1BQU8sQ0FBQSxDQUFBLENBSjhCLEVBS3JDLE1BQU8sQ0FBQSxDQUFBLENBTDhCLENBQXZDO01BRGdELENBQWxEO0lBRHlCLENBQTNCO1dBVUEsUUFBQSxDQUFTLGlCQUFULEVBQTRCLFNBQUE7YUFDMUIsRUFBQSxDQUFHLCtDQUFILEVBQW9ELFNBQUE7ZUFDbEQsTUFBQSxDQUFPLE9BQU8sQ0FBQyxhQUFSLENBQUEsQ0FBUCxDQUErQixDQUFDLE9BQWhDLENBQXdDLENBQ3RDLE1BQU8sQ0FBQSxDQUFBLENBRCtCLEVBRXRDLE1BQU8sQ0FBQSxDQUFBLENBRitCLEVBR3RDLE1BQU8sQ0FBQSxDQUFBLENBSCtCLEVBSXRDLE1BQU8sQ0FBQSxDQUFBLENBSitCLEVBS3RDLE1BQU8sQ0FBQSxDQUFBLENBTCtCLENBQXhDO01BRGtELENBQXBEO0lBRDBCLENBQTVCO0VBeENrQixDQUFwQjtBQUxBIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSAnLi9oZWxwZXJzL21hdGNoZXJzJ1xuXG5Db2xvciA9IHJlcXVpcmUgJy4uL2xpYi9jb2xvcidcblBhbGV0dGUgPSByZXF1aXJlICcuLi9saWIvcGFsZXR0ZSdcblxuZGVzY3JpYmUgJ1BhbGV0dGUnLCAtPlxuICBbcGFsZXR0ZSwgY29sb3JzXSA9IFtdXG5cbiAgY3JlYXRlVmFyID0gKG5hbWUsIGNvbG9yLCBwYXRoLCBsaW5lKSAtPlxuICAgIHtuYW1lLCBjb2xvciwgcGF0aCwgbGluZX1cblxuICBiZWZvcmVFYWNoIC0+XG4gICAgY29sb3JzID0gW1xuICAgICAgY3JlYXRlVmFyICdyZWQnLCBuZXcgQ29sb3IoJyNmZjAwMDAnKSwgJ2ZpbGUuc3R5bCcsIDBcbiAgICAgIGNyZWF0ZVZhciAnZ3JlZW4nLCBuZXcgQ29sb3IoJyMwMGZmMDAnKSwgJ2ZpbGUuc3R5bCcsIDFcbiAgICAgIGNyZWF0ZVZhciAnYmx1ZScsIG5ldyBDb2xvcignIzAwMDBmZicpLCAnZmlsZS5zdHlsJywgMlxuICAgICAgY3JlYXRlVmFyICdyZWRDb3B5JywgbmV3IENvbG9yKCcjZmYwMDAwJyksICdmaWxlLnN0eWwnLCAzXG4gICAgICBjcmVhdGVWYXIgJ3JlZCcsIG5ldyBDb2xvcignI2ZmMDAwMCcpLCAnZmlsZTIuc3R5bCcsIDBcbiAgICBdXG4gICAgcGFsZXR0ZSA9IG5ldyBQYWxldHRlKGNvbG9ycylcblxuICBkZXNjcmliZSAnOjpnZXRDb2xvcnNDb3VudCcsIC0+XG4gICAgaXQgJ3JldHVybnMgdGhlIG51bWJlciBvZiBjb2xvcnMgaW4gdGhlIHBhbGV0dGUnLCAtPlxuICAgICAgZXhwZWN0KHBhbGV0dGUuZ2V0Q29sb3JzQ291bnQoKSkudG9FcXVhbCg1KVxuXG4gIGRlc2NyaWJlICc6OmdldENvbG9yc05hbWVzJywgLT5cbiAgICBpdCAncmV0dXJucyB0aGUgbmFtZXMgb2YgdGhlIGNvbG9ycyBpbiB0aGUgcGFsZXR0ZScsIC0+XG4gICAgICBleHBlY3QocGFsZXR0ZS5nZXRDb2xvcnNOYW1lcygpKS50b0VxdWFsKFtcbiAgICAgICAgJ3JlZCdcbiAgICAgICAgJ2dyZWVuJ1xuICAgICAgICAnYmx1ZSdcbiAgICAgICAgJ3JlZENvcHknXG4gICAgICAgICdyZWQnXG4gICAgICBdKVxuXG4gIGRlc2NyaWJlICc6OnNvcnRlZEJ5TmFtZScsIC0+XG4gICAgaXQgJ3JldHVybnMgdGhlIGNvbG9ycyBhbmQgbmFtZXMgc29ydGVkIGJ5IG5hbWUnLCAtPlxuICAgICAgZXhwZWN0KHBhbGV0dGUuc29ydGVkQnlOYW1lKCkpLnRvRXF1YWwoW1xuICAgICAgICBjb2xvcnNbMl1cbiAgICAgICAgY29sb3JzWzFdXG4gICAgICAgIGNvbG9yc1swXVxuICAgICAgICBjb2xvcnNbNF1cbiAgICAgICAgY29sb3JzWzNdXG4gICAgICBdKVxuXG4gIGRlc2NyaWJlICc6OnNvcnRlZEJ5Q29sb3InLCAtPlxuICAgIGl0ICdyZXR1cm5zIHRoZSBjb2xvcnMgYW5kIG5hbWVzIHNvcnRlZCBieSBjb2xvcnMnLCAtPlxuICAgICAgZXhwZWN0KHBhbGV0dGUuc29ydGVkQnlDb2xvcigpKS50b0VxdWFsKFtcbiAgICAgICAgY29sb3JzWzBdXG4gICAgICAgIGNvbG9yc1szXVxuICAgICAgICBjb2xvcnNbNF1cbiAgICAgICAgY29sb3JzWzFdXG4gICAgICAgIGNvbG9yc1syXVxuICAgICAgXSlcbiJdfQ==
