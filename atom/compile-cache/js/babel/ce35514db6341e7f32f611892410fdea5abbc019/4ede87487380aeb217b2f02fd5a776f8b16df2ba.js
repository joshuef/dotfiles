/** @babel */

// Severity states, used to color && hide the mouse
var STATES = ['subtle', 'success', 'info', 'warning', 'error'];

// Default package tester
// Produces a generic warning if the package is active and a conflicting property is defined.
var testPackage = function testPackage(ecfg, check) {
	if (check['package'] !== undefined && atom.packages.isPackageActive(check['package']) === true && Array.isArray(check.properties) === true) {
		var props = check.properties.filter(function (p) {
			return ecfg.settings[p] !== 'unset';
		});
		if (props.length > 0) {
			return '**' + check['package'] + ':** It is possible that the\n\t\t\t"' + check['package'] + '"-package prevents the following\n\t\t\tpropert' + (props.length > 1 ? 'ies' : 'y') + ' from working reliably:\n\t\t\t`' + props.join('`, `') + '`.@You may try reconfiguring or disabling the\n\t\t\t"' + check['package'] + '"-package to solve regarding issues.';
		}
	}

	return false;
};

var CHECKLIST = [{
	statcon: 1,
	test: function test(ecfg) {
		return Object.keys(ecfg.settings).reduce(function (prev, curr) {
			return ecfg.settings[curr] !== 'unset' || prev;
		}, false);
	}
}, {
	statcon: 3,
	'package': 'whitespace',
	properties: ['insert_final_newline', 'trim_trailing_whitespace'],
	test: testPackage
}, {
	statcon: 4,
	test: function test(ecfg) {
		if (ecfg.settings.indent_style !== 'unset' && atom.packages.isPackageActive('tabs-to-spaces') === true) {
			var onSave = atom.config.get('tabs-to-spaces.onSave', { scope: ecfg.getCurrentEditor().getRootScopeDescriptor() });
			if (onSave !== 'none') {
				var ttsStyle = onSave === 'tabify' ? 'tab' : 'space';
				var tabStyle = ecfg.settings.indent_style;
				if (ttsStyle !== tabStyle) {
					return '**tabs-to-spaces** The configuration of the "tabs-to-spaces"-package\n\t\t\t\t\t\tconflicts with your current `indent_style`-property. "tabs-to-spaces" will\n\t\t\t\t\t\tconvert the indentation of the whole file to ' + ttsStyle + 's as soon as you save.\n\t\t\t\t\t\t@To fix this set the "On Save"-property of "tabs-to-spaces" to `none`.';
				}
			}
		}

		return false;
	}
}, {
	statcon: 4,
	test: function test(ecfg) {
		if (ecfg.settings.indent_style !== 'unset' && atom.config.get('editor.tabType') !== 'auto') {
			var tabType = atom.config.get('editor.tabType');
			return '**Tab Type:** Your editor\'s configuration setting "Tab Type"\n\t\t\t\t(currently "' + tabType + '") prevents the editorconfig-property `indent_style`\n\t\t\t\tfrom working.@"Tab Type" **must** be set to "auto" to fix this issue.';
		}

		return false;
	}
}];

module.exports = function (ecfg) {
	var messages = [];
	var statcon = 0;

	// Iterates through the checklist, calls the given test and collects the result-messages
	function approveChecklist() {
		CHECKLIST.forEach(function (check) {
			if (check.test !== undefined && typeof check.test === 'function') {
				var result = check.test(ecfg, check);

				if (typeof result === 'string') {
					messages.push(result);
				}

				if ((typeof result === 'string' || typeof result === 'boolean' && result === true) && Number.isInteger(check.statcon) && check.statcon < STATES.length) {
					statcon = Math.max(statcon, check.statcon);
				}
			}
		});
	}

	approveChecklist();

	switch (statcon) {
		case 1:
			messages.push('The editorconfig was applied successfully and the editor for this file\n\t\t\tshould work as expected. If you face any unexpected behavior please report the issue to us.\n\t\t\t♥️');
			break;
		case 0:
			messages.push('No editorconfig-settings were applied for this file.');
			break;
		default:
			break;
	}

	// Apply changes
	ecfg.messages = messages;
	ecfg.state = STATES[statcon];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,