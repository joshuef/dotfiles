Object.defineProperty(exports, '__esModule', {
	value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _commandsGenerate = require('./commands/generate');

var _commandsGenerate2 = _interopRequireDefault(_commandsGenerate);

var _commandsShow = require('./commands/show');

var _commandsShow2 = _interopRequireDefault(_commandsShow);

var _commandsFix = require('./commands/fix');

var _commandsFix2 = _interopRequireDefault(_commandsFix);

var importLazy = require('import-lazy').proxy(require);

var atm = importLazy('atom');

var checklist = importLazy('./lib/checklist');
var wrapGuideInterceptor = importLazy('./lib/wrapguide-interceptor');
var statusTile = importLazy('./lib/statustile-view');
var editorconfig = importLazy('editorconfig');

// Sets the state of the embedded editorconfig
// This includes the severity (info, warning..) as well as the notification-messages for users
function setState(ecfg) {
	checklist(ecfg);
	statusTile.updateIcon(ecfg.state);
}

// Initializes the (into the TextBuffer-instance) embedded editorconfig-object
function initializeTextBuffer(buffer) {
	if ('editorconfig' in buffer === false) {
		buffer.editorconfig = {
			buffer: buffer, // Preserving a reference to the parent `TextBuffer`
			disposables: new atm.CompositeDisposable(),
			state: 'subtle',
			settings: {
				/* eslint-disable camelcase */
				trim_trailing_whitespace: 'unset',
				insert_final_newline: 'unset',
				max_line_length: 'unset',
				end_of_line: 'unset',
				indent_style: 'unset',
				tab_width: 'unset',
				charset: 'unset'
				/* eslint-enable camelcase */
			},

			// Get the current Editor for this.buffer
			getCurrentEditor: function getCurrentEditor() {
				var _this = this;

				return atom.workspace.getTextEditors().reduce(function (prev, curr) {
					return curr.getBuffer() === _this.buffer && curr || prev;
				}, undefined);
			},

			// Applies the settings to the buffer and the corresponding editor
			applySettings: function applySettings() {
				var editor = this.getCurrentEditor();
				if (!editor) {
					return;
				}

				var configOptions = { scope: editor.getRootScopeDescriptor() };
				var settings = this.settings;

				if (editor && editor.getBuffer() === buffer) {
					if (settings.indent_style === 'unset') {
						var usesSoftTabs = editor.usesSoftTabs();
						if (usesSoftTabs === undefined) {
							editor.setSoftTabs(atom.config.get('editor.softTabs', configOptions));
						} else {
							editor.setSoftTabs(usesSoftTabs);
						}
					} else {
						editor.setSoftTabs(settings.indent_style === 'space');
					}

					if (settings.tab_width === 'unset') {
						editor.setTabLength(atom.config.get('editor.tabLength', configOptions));
					} else {
						editor.setTabLength(settings.tab_width);
					}

					if (settings.charset === 'unset') {
						buffer.setEncoding(atom.config.get('core.fileEncoding', configOptions));
					} else {
						buffer.setEncoding(settings.charset);
					}

					// Max_line_length-settings
					var editorParams = {};
					if (settings.max_line_length === 'unset') {
						editorParams.preferredLineLength = atom.config.get('editor.preferredLineLength', configOptions);
					} else {
						editorParams.preferredLineLength = settings.max_line_length;
					}

					// Update the editor-properties
					editor.update(editorParams);

					// Ensure the wrap-guide is being intercepted
					var bufferDom = atom.views.getView(editor);
					var wrapGuide = bufferDom.querySelector('* /deep/ .wrap-guide');
					if (wrapGuide !== null) {
						if (wrapGuide.editorconfig === undefined) {
							wrapGuide.editorconfig = this;
							wrapGuide.getNativeGuideColumn = wrapGuide.getGuideColumn;
							wrapGuide.getGuideColumn = wrapGuideInterceptor.getGuideColumn.bind(wrapGuide);
							wrapGuide.getNativeGuidesColumns = wrapGuide.getGuidesColumns;
							wrapGuide.getGuidesColumns = wrapGuideInterceptor.getGuidesColumns.bind(wrapGuide);
						}

						if (typeof wrapGuide.updateGuide === 'function') {
							wrapGuide.updateGuide();
						} else {
							// NB: This won't work with multiple wrap-guides
							var columnWidth = bufferDom.getDefaultCharacterWidth() * editorParams.preferredLineLength;
							if (columnWidth > 0) {
								wrapGuide.style.left = Math.round(columnWidth) + 'px';
								wrapGuide.style.display = 'block';
							} else {
								wrapGuide.style.display = 'none';
							}
						}
					}

					if (settings.end_of_line !== 'unset') {
						buffer.setPreferredLineEnding(settings.end_of_line);
					}
				}

				setState(this);
			},

			// `onWillSave` event handler
			// Trims whitespaces and inserts/strips final newline before saving
			onWillSave: function onWillSave() {
				var settings = this.settings;

				if (settings.trim_trailing_whitespace === true) {
					buffer.backwardsScan(/[ \t]+$/gm, function (params) {
						if (params.match[0].length > 0) {
							params.replace('');
						}
					});
				}

				if (settings.insert_final_newline !== 'unset') {
					var lastRow = buffer.getLineCount() - 1;

					if (buffer.isRowBlank(lastRow)) {
						var stripStart = buffer.previousNonBlankRow(lastRow);

						if (settings.insert_final_newline === true) {
							stripStart += 1;
						}

						// Strip empty lines from the end
						if (stripStart < lastRow) {
							buffer.deleteRows(stripStart + 1, lastRow);
						}
					} else if (settings.insert_final_newline === true) {
						buffer.append('\n');
					}
				}
			}
		};

		buffer.editorconfig.disposables.add(buffer.onWillSave(buffer.editorconfig.onWillSave.bind(buffer.editorconfig)));

		if (buffer.getUri() && buffer.getUri().match(/[\\|/]\.editorconfig$/g) !== null) {
			buffer.editorconfig.disposables.add(buffer.onDidSave(reapplyEditorconfig));
		}
	}
}

// Reveal and apply the editorconfig for the given TextEditor-instance
function observeTextEditor(editor) {
	if (!editor) {
		return;
	}

	initializeTextBuffer(editor.getBuffer());

	var file = editor.getURI();
	if (!file) {
		editor.onDidSave(function () {
			observeTextEditor(editor);
		});
		return;
	}

	editorconfig.parse(file).then(function (config) {
		if (Object.keys(config).length === 0) {
			return;
		}

		var ecfg = editor.getBuffer().editorconfig;
		var settings = ecfg.settings;

		var lineEndings = {
			crlf: '\r\n',
			cr: '\r',
			lf: '\n'
		};

		// Preserve evaluated Editorconfig
		ecfg.config = config;

		/* eslint-disable camelcase */

		// Carefully normalize and initialize config-settings
		settings.trim_trailing_whitespace = 'trim_trailing_whitespace' in config && typeof config.trim_trailing_whitespace === 'boolean' ? config.trim_trailing_whitespace === true : 'unset';

		settings.insert_final_newline = 'insert_final_newline' in config && typeof config.insert_final_newline === 'boolean' ? config.insert_final_newline === true : 'unset';

		settings.indent_style = 'indent_style' in config && config.indent_style.search(/^(space|tab)$/) > -1 ? config.indent_style : 'unset';

		settings.end_of_line = lineEndings[config.end_of_line] || 'unset';

		settings.tab_width = parseInt(config.indent_size || config.tab_width, 10);
		if (isNaN(settings.tab_width) || settings.tab_width <= 0) {
			settings.tab_width = 'unset';
		}

		settings.max_line_length = parseInt(config.max_line_length, 10);
		if (isNaN(settings.max_line_length) || settings.max_line_length <= 0) {
			settings.max_line_length = 'unset';
		}

		settings.charset = 'charset' in config ? config.charset.replace(/-/g, '').toLowerCase() : 'unset';

		// #227: Allow `latin1` as an alias of ISO 8859-1.
		if (String(settings.charset).toLowerCase().replace(/\W/g, '') === 'latin1') {
			settings.charset = 'iso88591';
		}

		/* eslint-enable camelcase */

		ecfg.applySettings();
	})['catch'](function (error) {
		console.warn('atom-editorconfig: ' + error);
	});
}

// Reapplies the whole editorconfig to **all** open TextEditor-instances
function reapplyEditorconfig() {
	var textEditors = atom.workspace.getTextEditors();
	textEditors.forEach(function (editor) {
		observeTextEditor(editor);
	});
}

// Reapplies the settings immediately after changing the focus to a new pane
function observeActivePaneItem(editor) {
	if (editor && editor.constructor.name === 'TextEditor') {
		if (editor.buffer && editor.buffer.editorconfig) {
			editor.buffer.editorconfig.applySettings();
		}
	} else {
		statusTile.removeIcon();
	}
}

// Hook into the events to recognize the user opening new editors or changing the pane
var activate = function activate() {
	(0, _commandsGenerate2['default'])();
	(0, _commandsShow2['default'])();
	(0, _commandsFix2['default'])();
	atom.workspace.observeTextEditors(observeTextEditor);
	atom.workspace.observeActivePaneItem(observeActivePaneItem);
	reapplyEditorconfig();

	// #220: Fix spurious "thrashing" in open editors at startup
	if (!atom.packages.hasActivatedInitialPackages()) {
		(function () {
			var disposables = new atm.CompositeDisposable();
			disposables.add(atom.packages.onDidActivatePackage(function (pkg) {
				if (pkg.name === 'whitespace' || pkg.name === 'wrap-guide') {
					reapplyEditorconfig();
				}
			}), atom.packages.onDidActivateInitialPackages(function () {
				disposables.dispose();
				reapplyEditorconfig();
			}));
		})();
	}
};

// Clean the status-icon up, remove all embedded editorconfig-objects
var deactivate = function deactivate() {
	var textEditors = atom.workspace.getTextEditors();
	textEditors.forEach(function (editor) {
		editor.getBuffer().editorconfig.disposables.dispose();
	});
	statusTile.removeIcon();
};

// Apply the statusbar icon-container
// The icon will be applied if needed
var consumeStatusBar = function consumeStatusBar(statusBar) {
	if (statusTile.containerExists() === false) {
		statusBar.addRightTile({
			item: statusTile.createContainer(),
			priority: 999
		});
	}
};

exports['default'] = { activate: activate, deactivate: deactivate, consumeStatusBar: consumeStatusBar };
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,