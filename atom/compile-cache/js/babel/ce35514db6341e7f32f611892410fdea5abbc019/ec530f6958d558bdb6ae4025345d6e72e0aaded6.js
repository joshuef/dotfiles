Object.defineProperty(exports, '__esModule', {
	value: true
});
/** @babel */

var init = function init() {
	var displaySummary = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

	var editor = atom.workspace.getActiveTextEditor();
	if (!editor) {
		return;
	}

	var buffer = editor.getBuffer();
	if (typeof buffer.editorconfig === 'undefined') {
		return;
	}

	var settings = buffer.editorconfig.settings;

	var softTabs = settings.indent_style === 'space';
	var checkpoint = buffer.createCheckpoint();
	var fixedProperties = {
		endOfLine: 0,
		indentStyle: 0
	};

	// Fix end_of_line, if necessary
	if (settings.end_of_line !== 'unset') {
		var lastRow = buffer.getLastRow();
		for (var i = 0; i < lastRow; i++) {
			if (buffer.lineEndingForRow(i) !== settings.end_of_line && buffer.lineEndingForRow(i) !== '') {
				buffer.setTextInRange([[i, buffer.lineLengthForRow(i)], [i + 1, 0]], settings.end_of_line, { normalizeLineEndings: false });
				fixedProperties.endOfLine++;
			}
		}
	}

	// Fix indent_style, if necessary
	if (settings.indent_style !== 'unset') {
		(function () {
			var spaceChar = { 'true': ' ', 'false': '\\t' };
			var tabLength = editor.getTabLength();
			// Match only malformed (containing at least one wrong tab-char) lines
			var searchPattern = '^([' + spaceChar[softTabs] + ']*[' + spaceChar[!softTabs] + ']\\s*)';

			if (tabLength > 0) {
				buffer.backwardsScan(new RegExp(searchPattern, 'gm'), function (scan) {
					var columns = scan.matchText.split('').reduce(function (prev, curr) {
						fixedProperties.indentStyle += 1;

						if (curr === ' ') {
							return prev + 1;
						}

						return prev + tabLength - prev % tabLength;
					}, 0);

					Math.max(columns, Math.floor(columns / tabLength));
					if (softTabs === true) {
						scan.replace(' '.repeat(columns));
					} else {
						var tabString = '\t'.repeat(Math.floor(columns / tabLength));
						var remainingSpaces = ' '.repeat(columns % tabLength);
						scan.replace(tabString.concat(remainingSpaces));
					}
				});
			}
		})();
	}

	if (softTabs) {
		fixedProperties.indentStyle = Math.floor(fixedProperties.indentStyle / editor.getTabLength());
	}

	var changesInTotal = 0;
	Object.keys(fixedProperties).forEach(function (k) {
		changesInTotal += fixedProperties[k];
	});

	// Save changes, if they were any
	if (changesInTotal > 0) {
		buffer.groupChangesSinceCheckpoint(checkpoint);
	}

	// Display how many changes were made (for some reason)
	if (displaySummary) {
		var description = undefined;

		if (changesInTotal > 0) {
			var styleName = softTabs === true ? 'Tab(s)' : 'Space(s)';
			description = '\n| Properties       | Fixes                                       |\n|------------------|---------------------------------------------|\n| `end_of_line`    | ' + fixedProperties.endOfLine + '                |\n| `indent_style`   | ' + fixedProperties.indentStyle + ' ' + styleName + ' |\n| Total changes    | **' + changesInTotal + '**                       |\n';
		} else {
			description = '\nThe file ' + editor.getTitle() + ' conformed to the `end_of_line` and `indent_style` properties.\nNo changes were applied.\n';
		}

		atom.notifications.addSuccess(editor.getTitle(), {
			description: description.replace(/`/g, '`'),
			dismissable: true
		});
	}
};

var subscriber = function subscriber() {
	atom.commands.add('atom-workspace', {
		'EditorConfig:fix-file': function EditorConfigFixFile() {
			return init();
		},
		'EditorConfig:fix-file-quietly': function EditorConfigFixFileQuietly() {
			return init(false);
		}
	});
};

exports['default'] = subscriber;
exports.init = init;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,