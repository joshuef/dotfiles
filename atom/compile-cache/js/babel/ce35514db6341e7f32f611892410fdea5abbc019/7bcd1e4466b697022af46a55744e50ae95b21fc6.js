Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.isValidEditor = isValidEditor;
exports.focusEditor = focusEditor;
exports.replaceTag = replaceTag;
exports.replaceTags = replaceTags;
exports.formatType = formatType;
exports.prepareType = prepareType;
exports.prepareInlineDocs = prepareInlineDocs;
exports.buildDisplayText = buildDisplayText;
exports.buildSnippet = buildSnippet;
exports.extractParams = extractParams;
exports.formatTypeCompletion = formatTypeCompletion;
exports.disposeAll = disposeAll;
exports.openFileAndGoToPosition = openFileAndGoToPosition;
exports.openFileAndGoTo = openFileAndGoTo;
exports.updateTernFile = updateTernFile;
exports.writeFile = writeFile;
exports.isDirectory = isDirectory;
exports.fileExists = fileExists;
exports.getFileContent = getFileContent;
exports.readFile = readFile;
exports.markDefinitionBufferRange = markDefinitionBufferRange;
exports.getPackagePath = getPackagePath;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _atomTernjsManager = require('./atom-ternjs-manager');

var _atomTernjsManager2 = _interopRequireDefault(_atomTernjsManager);

var _atomTernjsPackageConfig = require('./atom-ternjs-package-config');

var _atomTernjsPackageConfig2 = _interopRequireDefault(_atomTernjsPackageConfig);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _servicesNavigation = require('./services/navigation');

var _servicesNavigation2 = _interopRequireDefault(_servicesNavigation);

'use babel';

var tags = {

  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;'
};

var grammars = ['JavaScript', 'JavaScript (JSX)', 'Babel ES6 JavaScript', 'Vue Component'];

function isValidEditor(editor) {

  var isTextEditor = atom.workspace.isTextEditor(editor);

  if (!isTextEditor || editor.isMini()) {

    return false;
  }

  var grammar = editor.getGrammar();

  if (!grammars.includes(grammar.name)) {

    return false;
  }

  return true;
}

function focusEditor() {

  var editor = atom.workspace.getActiveTextEditor();

  if (!editor) {

    return;
  }

  var view = atom.views.getView(editor);

  view && view.focus && view.focus();
}

function replaceTag(tag) {

  return tags[tag];
}

function replaceTags(str) {

  if (!str) {

    return '';
  }

  return str.replace(/[&<>]/g, replaceTag);
}

function formatType(data) {

  if (!data.type) {

    return '';
  }

  data.type = data.type.replace(/->/g, ':').replace('<top>', 'window');

  if (!data.exprName) {

    return data.type;
  }

  data.type = data.type.replace(/^fn/, data.exprName);

  return data.type;
}

function prepareType(data) {

  if (!data.type) {

    return;
  }

  return data.type.replace(/->/g, ':').replace('<top>', 'window');
}

function prepareInlineDocs(data) {

  return data.replace(/@param/, '<span class="doc-param-first">@param</span>').replace(/@param/g, '<span class="text-info doc-param">@param</span>').replace(/@return/, '<span class="text-info doc-return">@return</span>');
}

function buildDisplayText(params, name) {

  if (params.length === 0) {

    return name + '()';
  }

  var suggestionParams = params.map(function (param) {

    param = param.replace('}', '\\}');
    param = param.replace(/'"/g, '');

    return param;
  });

  return name + '(' + suggestionParams.join(',') + ')';
}

function buildSnippet(params, name) {

  var suggestionParams = params.map(function (param, i) {

    param = param.replace('}', '\\}');

    return '${' + (i + 1) + ':' + param + '}';
  });

  return name + '(' + suggestionParams.join(',') + ')';
}

function extractParams(type) {

  if (!type || type.startsWith('fn()')) {

    return [];
  }

  var params = [];
  var start = type.indexOf('(') + 1;
  var inside = 0;

  for (var i = start; i < type.length; i++) {

    if (type[i] === ':' && inside === -1) {

      params.push(type.substring(start, i - 2));

      break;
    }

    if (i === type.length - 1) {

      var param = type.substring(start, i);

      if (param.length) {

        params.push(param);
      }

      break;
    }

    if (type[i] === ',' && inside === 0) {

      params.push(type.substring(start, i));
      start = i + 1;

      continue;
    }

    if (type[i].match(/[{\[\(]/)) {

      inside++;

      continue;
    }

    if (type[i].match(/[}\]\)]/)) {

      inside--;
    }
  }

  return params;
}

function formatTypeCompletion(obj, isProperty, isObjectKey, isInFunDef) {

  if (obj.isKeyword) {

    obj._typeSelf = 'keyword';
  }

  if (obj.type === 'string') {

    obj.name = obj.name ? obj.name.replace(/(^"|"$)/g, '') : null;
  } else {

    obj.name = obj.name ? obj.name.replace(/["']/g, '') : null;
  }

  obj.name = obj.name ? obj.name.replace(/^..?\//, '') : null;

  if (!obj.type) {

    obj._displayText = obj.name;
    obj._snippet = obj.name;

    return obj;
  }

  if (!obj.type.startsWith('fn')) {

    if (isProperty) {

      obj._typeSelf = 'property';
    } else {

      obj._typeSelf = 'variable';
    }
  }

  obj.type = obj.rightLabel = prepareType(obj);

  if (obj.type.replace(/fn\(.+\)/, '').length === 0) {

    obj.leftLabel = '';
  } else {

    if (obj.type.indexOf('fn') === -1) {

      obj.leftLabel = obj.type;
    } else {

      obj.leftLabel = obj.type.replace(/fn\(.{0,}\)/, '').replace(' : ', '');
    }
  }

  if (obj.rightLabel.startsWith('fn')) {

    var params = extractParams(obj.rightLabel);
    var editor = atom.workspace.getActiveTextEditor();
    var cursor = editor.getLastCursor();
    var bufferPosition = cursor.getBufferPosition();
    var bufferPositionFollowing = [bufferPosition.row, bufferPosition.column + 1];
    var charFollowing = editor.getTextInBufferRange([bufferPosition, bufferPositionFollowing]);
    var shouldAddParenthesesToSnippet = charFollowing !== '(';

    if (_atomTernjsPackageConfig2['default'].options.useSnippets || _atomTernjsPackageConfig2['default'].options.useSnippetsAndFunction) {

      if (!isInFunDef) {

        if (params.length === 0) {

          obj._snippet = '' + obj.name + (shouldAddParenthesesToSnippet ? '()' : '');
        } else {

          obj._snippet = buildSnippet(params, obj.name);
        }
      }

      obj._hasParams = params.length ? true : false;
    } else {

      if (!isInFunDef) {

        obj._snippet = params.length ? obj.name + '(${' + 0 + ':${}})' : '' + obj.name + (shouldAddParenthesesToSnippet ? '()' : '');
      }

      obj._displayText = buildDisplayText(params, obj.name);
    }

    obj._typeSelf = 'function';
  }

  if (obj.name) {

    if (obj.leftLabel === obj.name) {

      obj.leftLabel = null;
      obj.rightLabel = null;
    }
  }

  if (obj.leftLabel === obj.rightLabel) {

    obj.rightLabel = null;
  }

  return obj;
}

function disposeAll(disposables) {

  disposables.forEach(function (disposable) {
    return disposable.dispose();
  });
}

function openFileAndGoToPosition(position, file) {

  atom.workspace.open(file).then(function (textEditor) {

    var cursor = textEditor.getLastCursor();

    if (!cursor) {

      return;
    }

    cursor.setBufferPosition(position);
  });
}

function openFileAndGoTo(start, file) {

  atom.workspace.open(file).then(function (textEditor) {

    var buffer = textEditor.getBuffer();
    var cursor = textEditor.getLastCursor();

    if (!buffer || !cursor) {

      return;
    }

    var bufferPosition = buffer.positionForCharacterIndex(start);

    cursor.setBufferPosition(buffer.positionForCharacterIndex(start));

    _servicesNavigation2['default'].append(textEditor, buffer, bufferPosition);

    markDefinitionBufferRange(cursor, textEditor);
  });
}

function updateTernFile(content) {

  var projectRoot = _atomTernjsManager2['default'].server && _atomTernjsManager2['default'].server.projectDir;

  if (!projectRoot) {

    return;
  }

  writeFile(_path2['default'].resolve(__dirname, projectRoot + '/.tern-project'), content);
}

function writeFile(filePath, content) {

  _fs2['default'].writeFile(filePath, content, function (error) {

    atom.workspace.open(filePath);

    if (!error) {

      var server = _atomTernjsManager2['default'].server;
      server && server.restart();

      return;
    }

    var message = 'Could not create/update .tern-project file. Use the README to manually create a .tern-project file.';

    atom.notifications.addInfo(message, {

      dismissable: true
    });
  });
}

function isDirectory(dir) {

  try {

    return _fs2['default'].statSync(dir).isDirectory();
  } catch (error) {

    return false;
  }
}

function fileExists(path) {

  try {

    _fs2['default'].accessSync(path, _fs2['default'].F_OK, function (error) {

      console.error(error);
    });
  } catch (error) {

    return false;
  }
}

function getFileContent(filePath, root) {

  var _filePath = root + filePath;
  var resolvedPath = _path2['default'].resolve(__dirname, _filePath);

  if (fileExists(resolvedPath) !== undefined) {

    return false;
  }

  return readFile(resolvedPath);
}

function readFile(path) {

  try {

    return _fs2['default'].readFileSync(path, 'utf8');
  } catch (err) {

    return undefined;
  }
}

function markDefinitionBufferRange(cursor, editor) {

  var range = cursor.getCurrentWordBufferRange();
  var marker = editor.markBufferRange(range, { invalidate: 'touch' });

  var decoration = editor.decorateMarker(marker, {

    type: 'highlight',
    'class': 'atom-ternjs-definition-marker',
    invalidate: 'touch'
  });

  if (!decoration) {

    return;
  }

  setTimeout(function () {

    decoration.setProperties({

      type: 'highlight',
      'class': 'atom-ternjs-definition-marker active',
      invalidate: 'touch'
    });
  }, 1);

  setTimeout(function () {

    decoration.setProperties({

      type: 'highlight',
      'class': 'atom-ternjs-definition-marker',
      invalidate: 'touch'
    });
  }, 1501);

  setTimeout(function () {

    marker.destroy();
  }, 2500);
}

function getPackagePath() {

  var packagPath = atom.packages.resolvePackagePath('atom-ternjs');

  return packagPath;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,