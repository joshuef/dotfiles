(function() {
  var MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES, NAMESPACE, PackageUpdater, WARMUP_WAIT, fs, getFs, path;

  fs = null;

  path = null;

  PackageUpdater = null;

  getFs = function() {
    return fs != null ? fs : fs = require('fs-plus');
  };

  NAMESPACE = 'auto-update-packages';

  WARMUP_WAIT = 10 * 1000;

  MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES = 15;

  module.exports = {
    config: {
      intervalMinutes: {
        type: 'integer',
        minimum: MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES,
        "default": 6 * 60,
        title: 'Auto-Update Interval Minutes'
      }
    },
    activate: function(state) {
      var commands;
      commands = {};
      commands[NAMESPACE + ":update-now"] = (function(_this) {
        return function() {
          return _this.updatePackages(false);
        };
      })(this);
      this.commandSubscription = atom.commands.add('atom-workspace', commands);
      return setTimeout((function(_this) {
        return function() {
          return _this.enableAutoUpdate();
        };
      })(this), WARMUP_WAIT);
    },
    deactivate: function() {
      var ref;
      this.disableAutoUpdate();
      if ((ref = this.commandSubscription) != null) {
        ref.dispose();
      }
      return this.commandSubscription = null;
    },
    enableAutoUpdate: function() {
      this.updatePackagesIfAutoUpdateBlockIsExpired();
      this.autoUpdateCheck = setInterval((function(_this) {
        return function() {
          return _this.updatePackagesIfAutoUpdateBlockIsExpired();
        };
      })(this), this.getAutoUpdateCheckInterval());
      return this.configSubscription = atom.config.onDidChange(NAMESPACE, (function(_this) {
        return function() {
          _this.disableAutoUpdate();
          return _this.enableAutoUpdate();
        };
      })(this));
    },
    disableAutoUpdate: function() {
      var ref;
      if ((ref = this.configSubscription) != null) {
        ref.dispose();
      }
      this.configSubscription = null;
      if (this.autoUpdateCheck) {
        clearInterval(this.autoUpdateCheck);
      }
      return this.autoUpdateCheck = null;
    },
    updatePackagesIfAutoUpdateBlockIsExpired: function() {
      var lastUpdateTime;
      lastUpdateTime = this.loadLastUpdateTime() || 0;
      if (Date.now() > lastUpdateTime + this.getAutoUpdateBlockDuration()) {
        return this.updatePackages();
      }
    },
    updatePackages: function(isAutoUpdate) {
      if (isAutoUpdate == null) {
        isAutoUpdate = true;
      }
      if (PackageUpdater == null) {
        PackageUpdater = require('./package-updater');
      }
      PackageUpdater.updatePackages(isAutoUpdate);
      return this.saveLastUpdateTime();
    },
    getAutoUpdateBlockDuration: function() {
      var minutes;
      minutes = atom.config.get(NAMESPACE + ".intervalMinutes");
      if (isNaN(minutes) || minutes < MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES) {
        minutes = MINIMUM_AUTO_UPDATE_BLOCK_DURATION_MINUTES;
      }
      return minutes * 60 * 1000;
    },
    getAutoUpdateCheckInterval: function() {
      return this.getAutoUpdateBlockDuration() / 15;
    },
    loadLastUpdateTime: function() {
      var string;
      try {
        string = getFs().readFileSync(this.getLastUpdateTimeFilePath());
        return parseInt(string);
      } catch (error) {
        return null;
      }
    },
    saveLastUpdateTime: function() {
      return getFs().writeFileSync(this.getLastUpdateTimeFilePath(), Date.now().toString());
    },
    getLastUpdateTimeFilePath: function() {
      var dotAtomPath;
      if (path == null) {
        path = require('path');
      }
      dotAtomPath = getFs().absolute('~/.atom');
      return path.join(dotAtomPath, 'storage', NAMESPACE + "-last-update-time");
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2pvc2gvZG90ZmlsZXMvYXRvbS9wYWNrYWdlcy9hdXRvLXVwZGF0ZS1wYWNrYWdlcy9saWIvYXV0by11cGRhdGUtcGFja2FnZXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxFQUFBLEdBQUs7O0VBQ0wsSUFBQSxHQUFPOztFQUNQLGNBQUEsR0FBaUI7O0VBRWpCLEtBQUEsR0FBUSxTQUFBO3dCQUNOLEtBQUEsS0FBTSxPQUFBLENBQVEsU0FBUjtFQURBOztFQUdSLFNBQUEsR0FBWTs7RUFDWixXQUFBLEdBQWMsRUFBQSxHQUFLOztFQUNuQiwwQ0FBQSxHQUE2Qzs7RUFFN0MsTUFBTSxDQUFDLE9BQVAsR0FDRTtJQUFBLE1BQUEsRUFDRTtNQUFBLGVBQUEsRUFDRTtRQUFBLElBQUEsRUFBTSxTQUFOO1FBQ0EsT0FBQSxFQUFTLDBDQURUO1FBRUEsQ0FBQSxPQUFBLENBQUEsRUFBUyxDQUFBLEdBQUksRUFGYjtRQUdBLEtBQUEsRUFBTyw4QkFIUDtPQURGO0tBREY7SUFPQSxRQUFBLEVBQVUsU0FBQyxLQUFEO0FBQ1IsVUFBQTtNQUFBLFFBQUEsR0FBVztNQUNYLFFBQVMsQ0FBRyxTQUFELEdBQVcsYUFBYixDQUFULEdBQXNDLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFBRyxLQUFDLENBQUEsY0FBRCxDQUFnQixLQUFoQjtRQUFIO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQTtNQUN0QyxJQUFDLENBQUEsbUJBQUQsR0FBdUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFkLENBQWtCLGdCQUFsQixFQUFvQyxRQUFwQzthQUV2QixVQUFBLENBQVcsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUNULEtBQUMsQ0FBQSxnQkFBRCxDQUFBO1FBRFM7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVgsRUFFRSxXQUZGO0lBTFEsQ0FQVjtJQWdC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QVYsRUFBdUIsU0FBdkIsRUFBcUMsU0FBRCxHQUFXLG1CQUEvQztJQUh5QixDQXhFM0I7O0FBWkYiLCJzb3VyY2VzQ29udGVudCI6WyJmcyA9IG51bGxcbnBhdGggPSBudWxsXG5QYWNrYWdlVXBkYXRlciA9IG51bGxcblxuZ2V0RnMgPSAtPlxuICBmcyA/PSByZXF1aXJlICdmcy1wbHVzJ1xuXG5OQU1FU1BBQ0UgPSAnYXV0by11cGRhdGUtcGFja2FnZXMnXG5XQVJNVVBfV0FJVCA9IDEwICogMTAwMFxuTUlOSU1VTV9BVVRPX1VQREFURV9CTE9DS19EVVJBVElPTl9NSU5VVEVTID0gMTVcblxubW9kdWxlLmV4cG9ydHMgPVxuICBjb25maWc6XG4gICAgaW50ZXJ2YWxNaW51dGVzOlxuICAgICAgdHlwZTogJ2ludGVnZXInXG4gICAgICBtaW5pbXVtOiBNSU5JTVVNX0FVVE9fVVBEQVRFX0JMT0NLX0RVUkFUSU9OX01JTlVURVNcbiAgICAgIGRlZmF1bHQ6IDYgKiA2MFxuICAgICAgdGl0bGU6ICdBdXRvLVVwZGF0ZSBJbnRlcnZhbCBNaW51dGVzJ1xuXG4gIGFjdGl2YXRlOiAoc3RhdGUpIC0+XG4gICAgY29tbWFuZHMgPSB7fVxuICAgIGNvbW1hbmRzW1wiI3tOQU1FU1BBQ0V9OnVwZGF0ZS1ub3dcIl0gPSA9PiBAdXBkYXRlUGFja2FnZXMoZmFsc2UpXG4gICAgQGNvbW1hbmRTdWJzY3JpcHRpb24gPSBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCBjb21tYW5kcylcblxuICAgIHNldFRpbWVvdXQgPT5cbiAgICAgIEBlbmFibGVBdXRvVXBkYXRlKClcbiAgICAsIFdBUk1VUF9XQUlUXG5cbiAgZGVhY3RpdmF0ZTogLT5cbiAgICBAZGlzYWJsZUF1dG9VcGRhdGUoKVxuICAgIEBjb21tYW5kU3Vic2NyaXB0aW9uPy5kaXNwb3NlKClcbiAgICBAY29tbWFuZFN1YnNjcmlwdGlvbiA9IG51bGxcblxuICBlbmFibGVBdXRvVXBkYXRlOiAtPlxuICAgIEB1cGRhdGVQYWNrYWdlc0lmQXV0b1VwZGF0ZUJsb2NrSXNFeHBpcmVkKClcblxuICAgIEBhdXRvVXBkYXRlQ2hlY2sgPSBzZXRJbnRlcnZhbCA9PlxuICAgICAgQHVwZGF0ZVBhY2thZ2VzSWZBdXRvVXBkYXRlQmxvY2tJc0V4cGlyZWQoKVxuICAgICwgQGdldEF1dG9VcGRhdGVDaGVja0ludGVydmFsKClcblxuICAgIEBjb25maWdTdWJzY3JpcHRpb24gPSBhdG9tLmNvbmZpZy5vbkRpZENoYW5nZSBOQU1FU1BBQ0UsID0+XG4gICAgICBAZGlzYWJsZUF1dG9VcGRhdGUoKVxuICAgICAgQGVuYWJsZUF1dG9VcGRhdGUoKVxuXG4gIGRpc2FibGVBdXRvVXBkYXRlOiAtPlxuICAgIEBjb25maWdTdWJzY3JpcHRpb24/LmRpc3Bvc2UoKVxuICAgIEBjb25maWdTdWJzY3JpcHRpb24gPSBudWxsXG5cbiAgICBjbGVhckludGVydmFsKEBhdXRvVXBkYXRlQ2hlY2spIGlmIEBhdXRvVXBkYXRlQ2hlY2tcbiAgICBAYXV0b1VwZGF0ZUNoZWNrID0gbnVsbFxuXG4gIHVwZGF0ZVBhY2thZ2VzSWZBdXRvVXBkYXRlQmxvY2tJc0V4cGlyZWQ6IC0+XG4gICAgbGFzdFVwZGF0ZVRpbWUgPSBAbG9hZExhc3RVcGRhdGVUaW1lKCkgfHwgMFxuICAgIGlmIERhdGUubm93KCkgPiBsYXN0VXBkYXRlVGltZSArIEBnZXRBdXRvVXBkYXRlQmxvY2tEdXJhdGlvbigpXG4gICAgICBAdXBkYXRlUGFja2FnZXMoKVxuXG4gIHVwZGF0ZVBhY2thZ2VzOiAoaXNBdXRvVXBkYXRlID0gdHJ1ZSkgLT5cbiAgICBQYWNrYWdlVXBkYXRlciA/PSByZXF1aXJlICcuL3BhY2thZ2UtdXBkYXRlcidcbiAgICBQYWNrYWdlVXBkYXRlci51cGRhdGVQYWNrYWdlcyhpc0F1dG9VcGRhdGUpXG4gICAgQHNhdmVMYXN0VXBkYXRlVGltZSgpXG5cbiAgZ2V0QXV0b1VwZGF0ZUJsb2NrRHVyYXRpb246IC0+XG4gICAgbWludXRlcyA9IGF0b20uY29uZmlnLmdldChcIiN7TkFNRVNQQUNFfS5pbnRlcnZhbE1pbnV0ZXNcIilcblxuICAgIGlmIGlzTmFOKG1pbnV0ZXMpIHx8IG1pbnV0ZXMgPCBNSU5JTVVNX0FVVE9fVVBEQVRFX0JMT0NLX0RVUkFUSU9OX01JTlVURVNcbiAgICAgIG1pbnV0ZXMgPSBNSU5JTVVNX0FVVE9fVVBEQVRFX0JMT0NLX0RVUkFUSU9OX01JTlVURVNcblxuICAgIG1pbnV0ZXMgKiA2MCAqIDEwMDBcblxuICBnZXRBdXRvVXBkYXRlQ2hlY2tJbnRlcnZhbDogLT5cbiAgICBAZ2V0QXV0b1VwZGF0ZUJsb2NrRHVyYXRpb24oKSAvIDE1XG5cbiAgIyBhdXRvLXVwZ3JhZGUtcGFja2FnZXMgcnVucyBvbiBlYWNoIEF0b20gaW5zdGFuY2UsXG4gICMgc28gd2UgbmVlZCB0byBzaGFyZSB0aGUgbGFzdCB1cGRhdGVkIHRpbWUgdmlhIGEgZmlsZSBiZXR3ZWVuIHRoZSBpbnN0YW5jZXMuXG4gIGxvYWRMYXN0VXBkYXRlVGltZTogLT5cbiAgICB0cnlcbiAgICAgIHN0cmluZyA9IGdldEZzKCkucmVhZEZpbGVTeW5jKEBnZXRMYXN0VXBkYXRlVGltZUZpbGVQYXRoKCkpXG4gICAgICBwYXJzZUludChzdHJpbmcpXG4gICAgY2F0Y2hcbiAgICAgIG51bGxcblxuICBzYXZlTGFzdFVwZGF0ZVRpbWU6IC0+XG4gICAgZ2V0RnMoKS53cml0ZUZpbGVTeW5jKEBnZXRMYXN0VXBkYXRlVGltZUZpbGVQYXRoKCksIERhdGUubm93KCkudG9TdHJpbmcoKSlcblxuICBnZXRMYXN0VXBkYXRlVGltZUZpbGVQYXRoOiAtPlxuICAgIHBhdGggPz0gcmVxdWlyZSAncGF0aCdcbiAgICBkb3RBdG9tUGF0aCA9IGdldEZzKCkuYWJzb2x1dGUoJ34vLmF0b20nKVxuICAgIHBhdGguam9pbihkb3RBdG9tUGF0aCwgJ3N0b3JhZ2UnLCBcIiN7TkFNRVNQQUNFfS1sYXN0LXVwZGF0ZS10aW1lXCIpXG4iXX0=
